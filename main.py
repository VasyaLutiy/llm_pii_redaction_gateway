from llm_pii_proxy.observability import logger as obs_logger
obs_logger.setup_logging()

import logging
import sys
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from llm_pii_proxy.api.routes.chat import router as chat_router
from llm_pii_proxy.api.routes.health import router as health_router

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è PII Proxy"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    debug_mode = os.getenv('PII_PROXY_DEBUG', 'false').lower() == 'true'
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    formatter = logging.Formatter(
        '%(asctime)s | %(levelname)8s | %(name)s | %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    file_handler = logging.FileHandler('/tmp/llm_pii_proxy_debug.log', mode='w', encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –ø–∏—à–µ–º –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    root_logger = obs_logger.get_logger()
    root_logger.setLevel(logging.DEBUG if debug_mode else logging.INFO)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    for logger_name in [
        'llm_pii_proxy.services.llm_service',
        'llm_pii_proxy.api.routes.chat',
        'llm_pii_proxy.security.pii_gateway',
        'llm_pii_proxy.providers.azure_provider',
        'llm_pii_proxy.providers.ollama_provider'
    ]:
        logger = obs_logger.get_logger(logger_name)
        logger.setLevel(logging.DEBUG if debug_mode else logging.INFO)
    
    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    obs_logger.get_logger('httpx').setLevel(obs_logger.logging.WARNING)
    obs_logger.get_logger('openai').setLevel(obs_logger.logging.WARNING)
    obs_logger.get_logger('urllib3').setLevel(obs_logger.logging.WARNING)
    
    if debug_mode:
        logging.info("üîç DEBUG –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    logging.info("üöÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è LLM PII Proxy")
    logging.info("üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: /tmp/llm_pii_proxy_debug.log")

def create_app() -> FastAPI:
    
    app = FastAPI(
        title="LLM PII Proxy", 
        version="1.0.0",
        description="–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã PII –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LLM"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ preflight OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å)
        allow_credentials=True,
        allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã
        allow_headers=["*"]   # –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    )

    app.include_router(chat_router)
    app.include_router(health_router)
    
    logging.info("üåê FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return app 