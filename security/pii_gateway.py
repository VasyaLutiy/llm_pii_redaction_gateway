# security/pii_gateway.py

# PII redaction logic will go here. 

import time
import logging
import os
from datetime import datetime, timedelta
from typing import Dict
from llm_pii_proxy.core.models import PIIResult, PIIMapping
from llm_pii_proxy.core.interfaces import PIISecurityGateway
from llm_pii_proxy.core.exceptions import PIISessionNotFoundError, PIIProcessingError
from .pii_redaction import PIIRedactionGateway, RedactionMapping
import asyncio

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

class AsyncPIISecurityGateway(PIISecurityGateway):
    def __init__(self, session_timeout_minutes: int = 60):
        self.redaction_gateway = PIIRedactionGateway()
        self.sessions: Dict[str, dict] = {}
        self.session_timeout = timedelta(minutes=session_timeout_minutes)
        self.debug_mode = os.getenv('PII_PROXY_DEBUG', 'false').lower() == 'true'
        logger.info(f"üîê PII Gateway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å timeout {session_timeout_minutes} –º–∏–Ω—É—Ç")

    async def _cleanup_expired_sessions(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏"""
        current_time = datetime.now()
        expired_sessions = []
        
        for session_id, session_data in self.sessions.items():
            if current_time - session_data["last_accessed"] > self.session_timeout:
                expired_sessions.append(session_id)
        
        for session_id in expired_sessions:
            logger.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏: {session_id}")
            self.sessions.pop(session_id, None)
        
        if expired_sessions:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(expired_sessions)} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π")

    async def mask_sensitive_data(self, content: str, session_id: str) -> PIIResult:
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not session_id:
            raise PIIProcessingError("Session ID cannot be empty")
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ streaming —Ä–µ–∂–∏–º–µ)
        if not content:
            logger.debug(f"‚ÑπÔ∏è [{session_id}] –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            return PIIResult(
                content="",
                mappings=[],
                session_id=session_id,
                pii_count=0
            )
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
        await self._cleanup_expired_sessions()
        
        logger.debug(f"üîç [{session_id}] –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ PII –¥–∞–Ω–Ω—ã—Ö", extra={
            "session_id": session_id,
            "content_length": len(content),
            "content_preview": content[:50] + "..." if len(content) > 50 else content
        })
        
        # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–∞–∂–µ –≤ DEBUG —Ä–µ–∂–∏–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if self.debug_mode:
            logger.debug(f"üìÑ [{session_id}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # Create session if needed
        if session_id not in self.sessions:
            self.sessions[session_id] = {
                "created_at": datetime.now(),
                "last_accessed": datetime.now(),
                "mappings": {}
            }
            logger.info(f"üìù [{session_id}] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è PII —Å–µ—Å—Å–∏—è")
        else:
            logger.debug(f"üîÑ [{session_id}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é PII —Å–µ—Å—Å–∏—é")
        
        try:
            # Clear previous mappings before processing new content
            self.redaction_gateway.clear_mapping()
            
            # Use existing PII gateway (sync, so run in thread pool)
            loop = asyncio.get_event_loop()
            masked_content = await loop.run_in_executor(None, self.redaction_gateway.mask_sensitive_data, content)
        except Exception as e:
            raise PIIProcessingError(f"Failed to mask PII data: {str(e)}")
        
        # Store mappings in session
        session = self.sessions[session_id]
        session["mappings"] = {
            masked: {
                "original": mapping.original,
                "masked": mapping.masked,
                "type": mapping.type,
                "created_at": getattr(mapping, "created_at", datetime.now())
            }
            for masked, mapping in self.redaction_gateway._mapping.items()
        }
        session["last_accessed"] = datetime.now()
        
        processing_time = (time.time() - start_time) * 1000
        pii_count = len(self.redaction_gateway._mapping)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PII —Ç–∏–ø–æ–≤ (–±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        pii_types = {}
        for masked, mapping in self.redaction_gateway._mapping.items():
            pii_type = mapping.type
            pii_types[pii_type] = pii_types.get(pii_type, 0) + 1
        
        if pii_count > 0:
            logger.info(f"üîí [{session_id}] –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –Ω–∞–π–¥–µ–Ω–æ {pii_count} PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤", extra={
                "session_id": session_id,
                "pii_count": pii_count,
                "pii_types": pii_types,
                "processing_time_ms": round(processing_time, 2),
                "content_length_before": len(content),
                "content_length_after": len(masked_content),
                "content_changed": content != masked_content
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if self.debug_mode:
                logger.debug(f"üîç [{session_id}] –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                for i, (masked, mapping) in enumerate(self.redaction_gateway._mapping.items()):
                    logger.debug(f"    {i+1}. –ù–ê–ô–î–ï–ù–û: '{mapping.original}' ‚Üí –ó–ê–ú–ï–ù–ï–ù–û –Ω–∞: '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
            else:
                logger.info(f"üîç [{session_id}] –ù–∞–π–¥–µ–Ω–Ω—ã–µ PII —ç–ª–µ–º–µ–Ω—Ç—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ):")
                for i, (masked, mapping) in enumerate(self.redaction_gateway._mapping.items()):
                    logger.info(f"    {i+1}. [–°–ö–†–´–¢–û] ‚Üí '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
        else:
            logger.info(f"‚úÖ [{session_id}] –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - PII –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        mappings = [PIIMapping(
            original=mapping["original"],
            masked=masked,
            type=mapping["type"],
            created_at=mapping["created_at"]
        ) for masked, mapping in session["mappings"].items()]
        
        return PIIResult(
            content=masked_content,
            mappings=mappings,
            session_id=session_id,
            pii_count=pii_count
        )

    async def unmask_sensitive_data(self, content: str, session_id: str) -> str:
        start_time = time.time()
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ streaming —Ä–µ–∂–∏–º–µ)
        if not content:
            logger.debug(f"‚ÑπÔ∏è [{session_id}] –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å")
            return ""
        
        logger.debug(f"üîì [{session_id}] –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ PII –¥–∞–Ω–Ω—ã—Ö", extra={
            "session_id": session_id,
            "content_length": len(content)
        })
        
        if self.debug_mode:
            logger.debug(f"üìÑ [{session_id}] –ò–°–•–û–î–ù–´–ô —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {content}")
        
        if session_id not in self.sessions:
            logger.error(f"‚ùå [{session_id}] PII —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            raise PIISessionNotFoundError(f"PII session not found: {session_id}")
        
        session = self.sessions[session_id]
        mappings_count = len(session["mappings"])
        
        logger.debug(f"üìã [{session_id}] –ù–∞–π–¥–µ–Ω–æ {mappings_count} PII –º–∞–ø–∏–Ω–≥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏
        if self.debug_mode and mappings_count > 0:
            logger.debug(f"üóÇÔ∏è [{session_id}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏ –¥–ª—è –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è:")
            for i, (masked_token, mapping_data) in enumerate(session["mappings"].items()):
                logger.debug(f"    {i+1}. '{masked_token}' ‚Üí '{mapping_data['original']}' (—Ç–∏–ø: {mapping_data['type']})")
        
        # Restore gateway mapping
        self.redaction_gateway._mapping.clear()
        for masked_token, mapping_data in session["mappings"].items():
            self.redaction_gateway._mapping[masked_token] = RedactionMapping(
                original=mapping_data["original"],
                masked=masked_token,
                type=mapping_data["type"]
            )
        
        loop = asyncio.get_event_loop()
        unmasked_content = await loop.run_in_executor(None, self.redaction_gateway.unmask_sensitive_data, content)
        
        session["last_accessed"] = datetime.now()
        processing_time = (time.time() - start_time) * 1000
        
        if self.debug_mode:
            logger.debug(f"üîì [{session_id}] –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {unmasked_content}")
        
        content_changed = content != unmasked_content
        if content_changed:
            logger.info(f"üîì [{session_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!", extra={
                "session_id": session_id,
                "mappings_applied": mappings_count,
                "processing_time_ms": round(processing_time, 2),
                "content_length_before": len(content),
                "content_length_after": len(unmasked_content),
                "content_changed": content_changed
            })
            
            if self.debug_mode:
                logger.debug(f"üîÄ [{session_id}] –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–∏:")
                logger.debug(f"    –î–û:  {content}")
                logger.debug(f"    –ü–û–°–õ–ï: {unmasked_content}")
        else:
            logger.info(f"‚ÑπÔ∏è [{session_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –º–∞—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ")
        
        return unmasked_content

    async def clear_session(self, session_id: str) -> None:
        if session_id in self.sessions:
            session = self.sessions[session_id]
            mappings_count = len(session["mappings"])
            session_age = datetime.now() - session["created_at"]
            
            logger.info(f"üßπ [{session_id}] –û—á–∏—Å—Ç–∫–∞ PII —Å–µ—Å—Å–∏–∏", extra={
                "session_id": session_id,
                "mappings_count": mappings_count,
                "session_age_seconds": session_age.total_seconds()
            })
            
            if self.debug_mode and mappings_count > 0:
                logger.debug(f"üóëÔ∏è [{session_id}] –£–¥–∞–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –º–∞–ø–∏–Ω–≥–∏:")
                for i, (masked_token, mapping_data) in enumerate(session["mappings"].items()):
                    logger.debug(f"    {i+1}. '{masked_token}' ‚Üí '{mapping_data['original']}' (—Ç–∏–ø: {mapping_data['type']})")
            
            self.sessions.pop(session_id, None)
        else:
            logger.warning(f"‚ö†Ô∏è [{session_id}] –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é") 