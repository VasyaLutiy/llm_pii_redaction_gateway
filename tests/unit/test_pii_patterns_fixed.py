#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• PII –ü–ê–¢–¢–ï–†–ù–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É—é—Ç PII
"""

import asyncio
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))

from llm_pii_proxy.security.pii_gateway import AsyncPIISecurityGateway

async def test_fixed_patterns():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö PII –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• PII –ü–ê–¢–¢–ï–†–ù–û–í")
    print("=" * 60)
    
    pii_gateway = AsyncPIISecurityGateway()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "name": "AWS –∫–ª—é—á –ø–æ–ª–Ω—ã–π",
            "content": "–ú–æ–π AWS –∫–ª—é—á AKIA1234567890EXAMPLE",
            "expected_count": 1,
            "expected_type": "aws_key"
        },
        {
            "name": "–ü–∞—Ä–æ–ª—å —Å —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º",
            "content": "–ø–∞—Ä–æ–ª–µ–º MySecretPassword123",
            "expected_count": 1,
            "expected_type": "password"
        },
        {
            "name": "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç",
            "content": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª config.json —Å –º–æ–∏–º AWS –∫–ª—é—á–æ–º AKIA1234567890EXAMPLE –∏ –ø–∞—Ä–æ–ª–µ–º MySecretPassword123",
            "expected_count": 2,
            "expected_types": ["aws_key", "password"]
        },
        {
            "name": "–ü–∞—Ä–æ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
            "content": "password is SecretPass123",
            "expected_count": 1,
            "expected_type": "password"
        }
    ]
    
    all_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {test_case['content']}")
        
        try:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º PII
            session_id = f"test_session_{i}"
            result = await pii_gateway.mask_sensitive_data(
                content=test_case['content'],
                session_id=session_id
            )
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ PII: {result.pii_count}")
            print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected_count']}")
            print(f"   –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {result.content}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PII
            if result.pii_count == test_case['expected_count']:
                print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ PII –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                test_passed = True
            else:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ PII")
                test_passed = False
                all_passed = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º PII)
            if test_case['expected_count'] > 0:
                if result.content != test_case['content']:
                    print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    print(f"   ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    test_passed = False
                    all_passed = False
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            await pii_gateway.clear_session(session_id)
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            test_passed = False
            all_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*60}")
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ PII –ü–ê–¢–¢–ï–†–ù–û–í –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ PII –ü–ê–¢–¢–ï–†–ù–û–í –ü–†–û–í–ê–õ–ï–ù–´")
    
    return all_passed

if __name__ == "__main__":
    asyncio.run(test_fixed_patterns()) 