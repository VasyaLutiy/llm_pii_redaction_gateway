import pytest
import asyncio
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))

from unittest.mock import AsyncMock, MagicMock
from llm_pii_proxy.services.llm_service import LLMService
from llm_pii_proxy.core.models import ChatRequest, ChatMessage, ChatResponse
from llm_pii_proxy.security.pii_gateway import AsyncPIISecurityGateway

@pytest.mark.asyncio
async def test_llm_service_process_chat_request_with_real_pii():
    pii_gateway = AsyncPIISecurityGateway()
    session_id = "test-session"
    test_content = "My AWS key is AKIA1234567890EXAMPLE and password is secret123."
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏
    pii_result = await pii_gateway.mask_sensitive_data(test_content, session_id)
    masked_content = pii_result.content

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –º–∞—Å–∫–∏ –≤ –º–æ–∫-–æ—Ç–≤–µ—Ç–µ LLM
    mock_llm_provider = MagicMock()
    mock_llm_provider.create_chat_completion = AsyncMock(return_value=ChatResponse(
        id="test-id",
        model="test-model",
        choices=[{
            "index": 0,
            "message": {"role": "assistant", "content": masked_content.replace("My", "Your")},
            "finish_reason": "stop"
        }],
        usage=None
    ))

    service = LLMService(mock_llm_provider, pii_gateway)
    request = ChatRequest(
        model="test-model",
        messages=[ChatMessage(role="user", content=test_content)],
        session_id=session_id
    )
    response = await service.process_chat_request(request)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö PII
    args, kwargs = mock_llm_provider.create_chat_completion.call_args
    masked_request = args[0]
    print("RAW masked request sent to Azure:", masked_request.messages[0].content)
    assert "AKIA" not in masked_request.messages[0].content
    assert "secret123" not in masked_request.messages[0].content
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert "AKIA1234567890EXAMPLE" in response.choices[0]["message"]["content"]
    assert "secret123" in response.choices[0]["message"]["content"]

@pytest.mark.asyncio
async def test_llm_service_full_demask_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí LLM —Å –º–∞—Å–∫–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç–µ ‚Üí –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("\n" + "="*80)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê PII PROXY")
    print("="*80)
    
    pii_gateway = AsyncPIISecurityGateway()
    session_id = "demo-session"
    test_content = "My AWS key is AKIA1234567890EXAMPLE and password is secret123."
    
    print(f"\nüìñ –®–ê–ì 1: –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print(f"   {test_content}")
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏
    pii_result = await pii_gateway.mask_sensitive_data(test_content, session_id)
    masked_content = pii_result.content
    
    print(f"\nüîí –®–ê–ì 2: –ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï PII –î–ê–ù–ù–´–•")
    print(f"   –ù–∞–π–¥–µ–Ω–æ PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {pii_result.pii_count}")
    for i, mapping in enumerate(pii_result.mappings):
        print(f"   {i+1}. '{mapping.original}' ‚Üí '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
    print(f"   –ó–ê–ú–ê–°–ö–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–ö–°–¢: {masked_content}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å–∫–∏ –∏–∑ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    aws_mask = None
    password_mask = None
    for mapping in pii_result.mappings:
        if mapping.type == 'aws_key':
            aws_mask = mapping.masked
        elif mapping.type == 'password':
            password_mask = mapping.masked
    
    # –®–∞–≥ 2: –ú–æ–∫–∏—Ä—É–µ–º LLM, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å–∫–∏ –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ
    llm_response_with_masks = f"I found your AWS key {aws_mask} and password {password_mask}. Here's what to do: First, immediately revoke {aws_mask} from your AWS console. Then change {password_mask} to something more secure!"
    
    print(f"\nüåê –®–ê–ì 3: –û–¢–ü–†–ê–í–ö–ê –í LLM")
    print(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ LLM...")
    
    print(f"\nüì® –®–ê–ì 4: –û–¢–í–ï–¢ LLM (–° –ú–ê–°–ö–ê–ú–ò)")
    print(f"   {llm_response_with_masks}")
    
    mock_llm_provider = MagicMock()
    mock_llm_provider.create_chat_completion = AsyncMock(return_value=ChatResponse(
        id="demo-id",
        model="gpt-4",
        choices=[{
            "index": 0,
            "message": {"role": "assistant", "content": llm_response_with_masks},
            "finish_reason": "stop"
        }],
        usage={"prompt_tokens": 20, "completion_tokens": 50, "total_tokens": 70}
    ))

    # –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LLM Service
    service = LLMService(mock_llm_provider, pii_gateway)
    request = ChatRequest(
        model="gpt-4",
        messages=[ChatMessage(role="user", content=test_content)],
        session_id=session_id
    )
    
    response = await service.process_chat_request(request)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_response = response.choices[0]["message"]["content"]
    
    print(f"\nüîì –®–ê–ì 5: –î–ï–ú–ê–°–ö–ò–†–û–í–ê–ù–ò–ï")
    print(f"   –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ PII –¥–∞–Ω–Ω—ã–µ...")
    for i, mapping in enumerate(pii_result.mappings):
        print(f"   {i+1}. '{mapping.masked}' ‚Üí '{mapping.original}' (—Ç–∏–ø: {mapping.type})")
    
    print(f"\nüéâ –®–ê–ì 6: –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ")
    print(f"   {final_response}")
    
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LLM –ø–æ–ª—É—á–∏–ª –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    args, kwargs = mock_llm_provider.create_chat_completion.call_args
    masked_request = args[0]
    
    llm_received_original = "AKIA1234567890EXAMPLE" in masked_request.messages[0].content or "secret123" in masked_request.messages[0].content
    print(f"   LLM –ø–æ–ª—É—á–∏–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ PII –¥–∞–Ω–Ω—ã–µ: {'‚ùå –ù–ï–¢' if not llm_received_original else 'üî¥ –î–ê - –û–®–ò–ë–ö–ê!'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã
    demask_worked = "AKIA1234567890EXAMPL" in final_response and "password is secret123." in final_response
    print(f"   –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ: {'‚úÖ –î–ê' if demask_worked else '‚ùå –ù–ï–¢'}")
    
    masks_removed = aws_mask not in final_response and password_mask not in final_response
    print(f"   –ú–∞—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {'‚úÖ –î–ê' if masks_removed else '‚ùå –ù–ï–¢'}")
    
    print("\n" + "="*80)
    print("üöÄ PII PROXY –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    assert not llm_received_original
    assert demask_worked
    assert masks_removed 