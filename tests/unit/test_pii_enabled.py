#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ PII –í –í–ö–õ–Æ–ß–ï–ù–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PII –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞
"""

import asyncio
import json
import os
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))

from llm_pii_proxy.services.llm_service import LLMService
from llm_pii_proxy.providers.azure_provider import AzureOpenAIProvider
from llm_pii_proxy.security.pii_gateway import AsyncPIISecurityGateway
from llm_pii_proxy.config.settings import Settings
from llm_pii_proxy.core.models import ChatRequest, ChatMessage

async def test_pii_protection_enabled():
    """–¢–µ—Å—Ç PII –∑–∞—â–∏—Ç—ã –≤ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    print("üß™ –¢–ï–°–¢: PII –∑–∞—â–∏—Ç–∞ –í–ö–õ–Æ–ß–ï–ù–ê")
    print("=" * 50)
    
    # –í–∫–ª—é—á–∞–µ–º PII –∑–∞—â–∏—Ç—É
    os.environ['PII_PROTECTION_ENABLED'] = 'true'
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π PII –∑–∞—â–∏—Ç–æ–π
        settings = Settings()
        azure_provider = AzureOpenAIProvider()
        pii_gateway = AsyncPIISecurityGateway()
        llm_service = LLMService(azure_provider, pii_gateway)
        
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   PII –∑–∞—â–∏—Ç–∞ –≤ settings: {settings.pii_protection_enabled}")
        print(f"   PII –∑–∞—â–∏—Ç–∞ –≤ LLMService: {llm_service.pii_enabled}")
        print(f"   Debug —Ä–µ–∂–∏–º: {settings.pii_proxy_debug}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å PII –¥–∞–Ω–Ω—ã–º–∏
        request = ChatRequest(
            model="gpt-4.1",
            messages=[
                ChatMessage(
                    role="user", 
                    content="–ü—Ä–∏–≤–µ—Ç! –ú–æ–π AWS –∫–ª—é—á AKIA1234567890EXAMPLE –∏ IP –∞–¥—Ä–µ—Å 192.168.1.100"
                )
            ],
            pii_protection=True,
            max_tokens=50
        )
        
        print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å:")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {request.messages[0].content}")
        print(f"   PII –∑–∞—â–∏—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {request.pii_protection}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ PII gateway –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ LLM –≤—ã–∑–æ–≤–∞)
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º PII gateway –Ω–∞–ø—Ä—è–º—É—é:")
        
        session_id = "test-session"
        pii_result = await pii_gateway.mask_sensitive_data(
            content=request.messages[0].content,
            session_id=session_id
        )
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {pii_result.pii_count}")
        print(f"   –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {pii_result.content}")
        
        if pii_result.pii_count > 0:
            print(f"   üîí PII —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã:")
            for i, mapping in enumerate(pii_result.mappings):
                print(f"      {i+1}. '{mapping.original}' ‚Üí '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
            unmasked = await pii_gateway.unmask_sensitive_data(pii_result.content, session_id)
            print(f"   üîì –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {unmasked}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if request.messages[0].content == unmasked:
                print(f"   ‚úÖ –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                success = True
            else:
                print(f"   ‚ùå –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                success = False
        else:
            print(f"   ‚ö†Ô∏è PII —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            success = False
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        await pii_gateway.clear_session(session_id)
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PII: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_pii_with_mock_llm_response():
    """–¢–µ—Å—Ç PII —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º LLM"""
    print("\nüß™ –¢–ï–°–¢: PII —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º LLM –æ—Ç–≤–µ—Ç–æ–º")
    print("=" * 50)
    
    # –í–∫–ª—é—á–∞–µ–º PII –∑–∞—â–∏—Ç—É
    os.environ['PII_PROTECTION_ENABLED'] = 'true'
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        settings = Settings()
        pii_gateway = AsyncPIISecurityGateway()
        
        session_id = "test-session-2"
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PII
        original_message = "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –º–æ–∏–º AWS –∫–ª—é—á–æ–º AKIA1234567890EXAMPLE"
        
        print(f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {original_message}")
        
        # 1. –ú–∞—Å–∫–∏—Ä—É–µ–º PII –≤ –∑–∞–ø—Ä–æ—Å–µ
        pii_result = await pii_gateway.mask_sensitive_data(original_message, session_id)
        masked_message = pii_result.content
        
        print(f"üîí –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {masked_message}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ PII: {pii_result.pii_count}")
        
        # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Å–∫–∏
        if pii_result.pii_count > 0:
            aws_mask = pii_result.mappings[0].masked
            simulated_llm_response = f"–Ø —Å–æ–∑–¥–∞–º —Ñ–∞–π–ª —Å –≤–∞—à–∏–º AWS –∫–ª—é—á–æ–º {aws_mask}. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ {aws_mask} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π."
            
            print(f"ü§ñ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: {simulated_llm_response}")
            
            # 3. –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            unmasked_response = await pii_gateway.unmask_sensitive_data(simulated_llm_response, session_id)
            
            print(f"üîì –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {unmasked_response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AWS –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
            if "AKIA1234567890EXAMPLE" in unmasked_response:
                print(f"‚úÖ AWS –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                success = True
            else:
                print(f"‚ùå AWS –∫–ª—é—á –Ω–µ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                success = False
        else:
            print(f"‚ö†Ô∏è PII –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è")
            success = False
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        await pii_gateway.clear_session(session_id)
        
        return success
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PII —Å LLM: {e}")
        return False

async def test_pii_configuration_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ PII –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢: –í–∞–ª–∏–¥–∞—Ü–∏—è PII –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –í–∫–ª—é—á–∞–µ–º PII –∑–∞—â–∏—Ç—É
        os.environ['PII_PROTECTION_ENABLED'] = 'true'
        
        # –°–æ–∑–¥–∞–µ–º settings
        settings = Settings()
        
        print(f"üìã PII –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   PII –≤–∫–ª—é—á–µ–Ω: {settings.pii_protection_enabled}")
        print(f"   PII patterns —Ñ–∞–π–ª: {settings.pii_patterns_config_path}")
        print(f"   PII timeout: {settings.pii_session_timeout_minutes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª patterns —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(settings.pii_patterns_config_path):
            print(f"   ‚úÖ PII patterns —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å PII gateway
            pii_gateway = AsyncPIISecurityGateway()
            print(f"   ‚úÖ PII gateway —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
            return True
        else:
            print(f"   ‚ùå PII patterns —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ PII –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PII –í –í–ö–õ–Æ–ß–ï–ù–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò")
    print("=" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    original_pii_setting = os.getenv('PII_PROTECTION_ENABLED')
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tests = [
            test_pii_configuration_validation,
            test_pii_protection_enabled,
            test_pii_with_mock_llm_response
        ]
        
        results = []
        for test in tests:
            try:
                result = await test()
                results.append(result)
            except Exception as e:
                print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
                results.append(False)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        passed = sum(results)
        total = len(results)
        
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ PII –∑–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            print("‚ùå PII –∑–∞—â–∏—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        
        return passed == total
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if original_pii_setting is not None:
            os.environ['PII_PROTECTION_ENABLED'] = original_pii_setting
        else:
            os.environ.pop('PII_PROTECTION_ENABLED', None)

if __name__ == "__main__":
    asyncio.run(main()) 