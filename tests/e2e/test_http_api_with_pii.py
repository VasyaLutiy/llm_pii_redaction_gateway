#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ HTTP API –° PII –ó–ê–©–ò–¢–û–ô
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTTP API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π PII –∑–∞—â–∏—Ç–æ–π
"""

import asyncio
import aiohttp
import json
import time

async def test_http_api_simple_pii():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ HTTP API —Å PII"""
    print("üß™ –¢–ï–°–¢ 1: HTTP API - –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å PII")
    print("=" * 60)
    
    url = "http://192.168.0.182:8000/v1/chat/completions"
    
    payload = {
        "model": "gpt-4.1",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ú–æ–π AWS –∫–ª—é—á AKIA1234567890EXAMPLE –∏ –ø–∞—Ä–æ–ª—å MySecretPassword123. –ú–æ–∂–µ—à—å —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?"
            }
        ],
        "pii_protection": True,
        "max_tokens": 150
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test-key"
    }
    
    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:")
    print(f"   URL: {url}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {payload['messages'][0]['content']}")
    print(f"   PII –∑–∞—â–∏—Ç–∞: {payload['pii_protection']}")
    
    try:
        async with aiohttp.ClientSession() as session:
            start_time = time.time()
            async with session.post(url, json=payload, headers=headers) as response:
                duration = time.time() - start_time
                
                print(f"\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"   –í—Ä–µ–º—è: {duration:.2f}s")
                
                if response.status == 200:
                    data = await response.json()
                    
                    print(f"   ID –æ—Ç–≤–µ—Ç–∞: {data.get('id')}")
                    print(f"   –ú–æ–¥–µ–ª—å: {data.get('model')}")
                    
                    content = data['choices'][0]['message']['content']
                    print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞:")
                    print(f"   {content}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PII –¥–∞–Ω–Ω—ã–µ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã
                    has_original_aws = "AKIA1234567890EXAMPLE" in content
                    has_original_password = "MySecretPassword123" in content
                    has_masked_data = "<aws_key_" in content or "<password_" in content
                    
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
                    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AWS –∫–ª—é—á: {has_original_aws}")
                    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {has_original_password}")
                    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {has_masked_data}")
                    
                    if has_original_aws or has_original_password:
                        print(f"   ‚úÖ PII –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                        return True
                    elif has_masked_data:
                        print(f"   ‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        return False
                    else:
                        print(f"   ‚ÑπÔ∏è LLM –Ω–µ —É–ø–æ–º—è–Ω—É–ª PII –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                        return True
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ HTTP –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False

async def test_http_api_tools_pii():
    """–¢–µ—Å—Ç tool calls —á–µ—Ä–µ–∑ HTTP API —Å PII"""
    print("\nüß™ –¢–ï–°–¢ 2: HTTP API - tool calls —Å PII")
    print("=" * 60)
    
    url = "http://192.168.0.182:8000/v1/chat/completions"
    
    payload = {
        "model": "gpt-4.1",
        "messages": [
            {
                "role": "user",
                "content": "–°–æ–∑–¥–∞–π —Ñ–∞–π–ª config.json —Å –º–æ–∏–º AWS –∫–ª—é—á–æ–º AKIA1234567890EXAMPLE –∏ –ø–∞—Ä–æ–ª–µ–º MySecretPassword123"
            }
        ],
        "pii_protection": True,
        "max_tokens": 200,
        "tools": [
            {
                "type": "function",
                "function": {
                    "name": "create_file",
                    "description": "Create a file with given content",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filename": {"type": "string"},
                            "content": {"type": "string"}
                        },
                        "required": ["filename", "content"]
                    }
                }
            }
        ]
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test-key"
    }
    
    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:")
    print(f"   URL: {url}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {payload['messages'][0]['content']}")
    print(f"   Tools: {len(payload['tools'])} tool(s)")
    print(f"   PII –∑–∞—â–∏—Ç–∞: {payload['pii_protection']}")
    
    try:
        async with aiohttp.ClientSession() as session:
            start_time = time.time()
            async with session.post(url, json=payload, headers=headers) as response:
                duration = time.time() - start_time
                
                print(f"\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"   –í—Ä–µ–º—è: {duration:.2f}s")
                
                if response.status == 200:
                    data = await response.json()
                    
                    print(f"   ID –æ—Ç–≤–µ—Ç–∞: {data.get('id')}")
                    print(f"   –ú–æ–¥–µ–ª—å: {data.get('model')}")
                    
                    choice = data['choices'][0]
                    if choice.get('message', {}).get('tool_calls'):
                        print(f"   üîß Tool calls –Ω–∞–π–¥–µ–Ω—ã: {len(choice['message']['tool_calls'])}")
                        
                        for i, tool_call in enumerate(choice['message']['tool_calls']):
                            print(f"\n   Tool call {i+1}:")
                            print(f"     Function: {tool_call['function']['name']}")
                            
                            args = tool_call['function']['arguments']
                            if isinstance(args, str):
                                args_dict = json.loads(args)
                            else:
                                args_dict = args
                            
                            print(f"     Arguments: {json.dumps(args_dict, indent=6, ensure_ascii=False)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PII –¥–∞–Ω–Ω—ã–µ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ tool call
                            args_str = json.dumps(args_dict)
                            has_original_aws = "AKIA1234567890EXAMPLE" in args_str
                            has_original_password = "MySecretPassword123" in args_str
                            has_masked_aws = "<aws_key_" in args_str
                            has_masked_password = "<password_" in args_str
                            
                            print(f"     üîç –ê–Ω–∞–ª–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:")
                            print(f"       –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π AWS –∫–ª—é—á: {has_original_aws}")
                            print(f"       –°–æ–¥–µ—Ä–∂–∏—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {has_original_password}")
                            print(f"       –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AWS –∫–ª—é—á: {has_masked_aws}")
                            print(f"       –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {has_masked_password}")
                            
                            if has_original_aws or has_original_password:
                                print(f"       ‚úÖ PII –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –≤ tool call")
                                return True
                            elif has_masked_aws or has_masked_password:
                                print(f"       ‚ùå PII –æ—Å—Ç–∞–ª—Å—è –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ tool call")
                                return False
                            else:
                                print(f"       ‚ö†Ô∏è PII –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ tool call –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö")
                                return False
                    else:
                        print(f"   üìù –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–±–µ–∑ tool calls)")
                        content = choice.get('message', {}).get('content', '')
                        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {content}")
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç tool calls, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        has_original_aws = "AKIA1234567890EXAMPLE" in content
                        has_original_password = "MySecretPassword123" in content
                        return has_original_aws or has_original_password
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ HTTP –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False

async def test_http_api_pii_disabled():
    """–¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π PII –∑–∞—â–∏—Ç–æ–π"""
    print("\nüß™ –¢–ï–°–¢ 3: HTTP API - PII –∑–∞—â–∏—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    print("=" * 60)
    
    url = "http://192.168.0.182:8000/v1/chat/completions"
    
    payload = {
        "model": "gpt-4.1",
        "messages": [
            {
                "role": "user",
                "content": "–ú–æ–π AWS –∫–ª—é—á AKIA1234567890EXAMPLE"
            }
        ],
        "pii_protection": False,  # –û—Ç–∫–ª—é—á–∞–µ–º PII –∑–∞—â–∏—Ç—É
        "max_tokens": 50
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test-key"
    }
    
    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:")
    print(f"   URL: {url}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {payload['messages'][0]['content']}")
    print(f"   PII –∑–∞—â–∏—Ç–∞: {payload['pii_protection']}")
    
    try:
        async with aiohttp.ClientSession() as session:
            start_time = time.time()
            async with session.post(url, json=payload, headers=headers) as response:
                duration = time.time() - start_time
                
                print(f"\n‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"   –í—Ä–µ–º—è: {duration:.2f}s")
                
                if response.status == 200:
                    data = await response.json()
                    
                    print(f"   ID –æ—Ç–≤–µ—Ç–∞: {data.get('id')}")
                    print(f"   –ú–æ–¥–µ–ª—å: {data.get('model')}")
                    
                    content = data['choices'][0]['message']['content']
                    print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞:")
                    print(f"   {content}")
                    
                    print(f"\nüîç –ê–Ω–∞–ª–∏–∑:")
                    print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π PII –∑–∞—â–∏—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ HTTP –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False

async def test_http_api_health():
    """–¢–µ—Å—Ç health endpoint"""
    print("\nüß™ –¢–ï–°–¢ 4: HTTP API - health check")
    print("=" * 60)
    
    url = "http://192.168.0.182:8000/health"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    print(f"   –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PII –∑–∞—â–∏—Ç–µ
                    has_pii_info = 'pii_protection' in str(data)
                    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PII: {has_pii_info}")
                    
                    return True
                else:
                    error_text = await response.text()
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_text}")
                    return False
                    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ HTTP –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTTP API –° PII –ó–ê–©–ò–¢–û–ô")
    print("=" * 70)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Ç–æ—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    await asyncio.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_http_api_health,
        test_http_api_pii_disabled,
        test_http_api_simple_pii,
        test_http_api_tools_pii
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ HTTP API")
    print("=" * 70)
    
    passed = sum(results)
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï HTTP API –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ LLM PII Proxy –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π PII –∑–∞—â–∏—Ç–æ–π")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï HTTP API –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main()) 