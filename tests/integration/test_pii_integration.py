#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ PII –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° TOOL CALLING
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ PII redaction —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å tool calling
"""

import asyncio
import json
import os
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../..'))

from llm_pii_proxy.security.pii_gateway import AsyncPIISecurityGateway
from llm_pii_proxy.services.llm_service import LLMService
from llm_pii_proxy.providers.azure_provider import AzureOpenAIProvider
from llm_pii_proxy.config.settings import Settings
from llm_pii_proxy.core.models import ChatRequest, ChatMessage

async def test_pii_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PII"""
    print("üß™ –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å PII")
    print("=" * 50)
    
    gateway = AsyncPIISecurityGateway()
    session_id = "test-session-1"
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å PII
    test_content = """
    –ú–æ–π AWS –∫–ª—é—á: AKIA1234567890EXAMPLE
    –ü–∞—Ä–æ–ª—å: mySecretPassword123
    API –∫–ª—é—á: sk-abc123def456ghi789
    IP –∞–¥—Ä–µ—Å: 192.168.1.100
    """
    
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
    print(test_content)
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º PII
    pii_result = await gateway.mask_sensitive_data(test_content, session_id)
    
    print(f"\nüîí –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {pii_result.pii_count}")
    print(f"   –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
    print(pii_result.content)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
    print(f"\nüóÇÔ∏è –ú–∞–ø–ø–∏–Ω–≥–∏:")
    for i, mapping in enumerate(pii_result.mappings):
        print(f"   {i+1}. '{mapping.original}' ‚Üí '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
    
    # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º
    unmasked = await gateway.unmask_sensitive_data(pii_result.content, session_id)
    
    print(f"\nüîì –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:")
    print(unmasked)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    success = "AKIA1234567890EXAMPLE" in unmasked and "mySecretPassword123" in unmasked
    print(f"\n‚úÖ –¢–µ—Å—Ç {'–ü–†–û–ô–î–ï–ù' if success else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    await gateway.clear_session(session_id)
    
    return success

async def test_pii_with_tool_calling():
    """–¢–µ—Å—Ç PII —Å tool calling"""
    print("\nüß™ –¢–ï–°–¢ 2: PII —Å Tool Calling")
    print("=" * 50)
    
    gateway = AsyncPIISecurityGateway()
    session_id = "test-session-2"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å PII –∏ tools
    request = ChatRequest(
        model="gpt-4.1",
        messages=[
            ChatMessage(
                role="user", 
                content="–°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –º–æ–∏–º AWS –∫–ª—é—á–æ–º AKIA1234567890EXAMPLE –∏ –ø–∞—Ä–æ–ª–µ–º mySecretPassword123"
            )
        ],
        session_id=session_id,
        pii_protection=True,
        tools=[
            {
                "type": "function",
                "function": {
                    "name": "create_file",
                    "description": "Create a file with content",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filename": {"type": "string"},
                            "content": {"type": "string"}
                        },
                        "required": ["filename", "content"]
                    }
                }
            }
        ]
    )
    
    print(f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(request.messages[0].content)
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º PII –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    pii_result = await gateway.mask_sensitive_data(request.messages[0].content, session_id)
    
    print(f"\nüîí –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print(pii_result.content)
    print(f"   –ù–∞–π–¥–µ–Ω–æ PII: {pii_result.pii_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
    print(f"\nüóÇÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:")
    for i, mapping in enumerate(pii_result.mappings):
        print(f"   {i+1}. '{mapping.original}' ‚Üí '{mapping.masked}' (—Ç–∏–ø: {mapping.type})")
    
    if pii_result.pii_count == 0:
        print("‚ö†Ô∏è PII —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è")
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    first_mapping = pii_result.mappings[0]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM —Å tool call, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å–∫–∏
    simulated_response = {
        "id": "chatcmpl-test",
        "object": "chat.completion",
        "model": "gpt-4.1",
        "choices": [
            {
                "index": 0,
                "message": {
                    "role": "assistant",
                    "content": None,
                    "tool_calls": [
                        {
                            "id": "call_test",
                            "type": "function",
                            "function": {
                                "name": "create_file",
                                "arguments": json.dumps({
                                    "filename": "credentials.txt",
                                    "content": f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {first_mapping.masked}"
                                })
                            }
                        }
                    ]
                },
                "finish_reason": "tool_calls"
            }
        ]
    }
    
    print(f"\nü§ñ –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç LLM (—Å –º–∞—Å–∫–∞–º–∏):")
    print(json.dumps(simulated_response["choices"][0]["message"]["tool_calls"][0]["function"]["arguments"], indent=2))
    
    # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º tool call arguments
    tool_call = simulated_response["choices"][0]["message"]["tool_calls"][0]
    masked_args = tool_call["function"]["arguments"]
    
    unmasked_args = await gateway.unmask_sensitive_data(masked_args, session_id)
    
    print(f"\nüîì –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:")
    print(unmasked_args)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π PII —ç–ª–µ–º–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    success = first_mapping.original in unmasked_args
    print(f"\n‚úÖ –¢–µ—Å—Ç {'–ü–†–û–ô–î–ï–ù' if success else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    await gateway.clear_session(session_id)
    
    return success

async def test_pii_streaming():
    """–¢–µ—Å—Ç PII —Å–æ streaming"""
    print("\nüß™ –¢–ï–°–¢ 3: PII —Å–æ Streaming")
    print("=" * 50)
    
    gateway = AsyncPIISecurityGateway()
    session_id = "test-session-3"
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º streaming chunks —Å PII
    chunks = [
        "–í–∞—à AWS –∫–ª—é—á ",
        "AKIA1234567890EXAMPLE ",
        "–∏ –ø–∞—Ä–æ–ª—å ",
        "mySecretPassword123 ",
        "—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ"
    ]
    
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–µ chunks:")
    for i, chunk in enumerate(chunks):
        print(f"   {i+1}. '{chunk}'")
    
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π chunk
    masked_chunks = []
    for i, chunk in enumerate(chunks):
        pii_result = await gateway.mask_sensitive_data(chunk, session_id)
        masked_chunks.append(pii_result.content)
        print(f"üîí Chunk {i+1} –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω: '{chunk}' ‚Üí '{pii_result.content}'")
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    full_masked = "".join(masked_chunks)
    print(f"\nüîó –ü–æ–ª–Ω—ã–π –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(full_masked)
    
    # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    unmasked = await gateway.unmask_sensitive_data(full_masked, session_id)
    
    print(f"\nüîì –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    print(unmasked)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
    success = "AKIA1234567890EXAMPLE" in unmasked and "mySecretPassword123" in unmasked
    print(f"\n‚úÖ –¢–µ—Å—Ç {'–ü–†–û–ô–î–ï–ù' if success else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    await gateway.clear_session(session_id)
    
    return success

async def test_pii_edge_cases():
    """–¢–µ—Å—Ç edge cases –¥–ª—è PII"""
    print("\nüß™ –¢–ï–°–¢ 4: Edge Cases")
    print("=" * 50)
    
    gateway = AsyncPIISecurityGateway()
    session_id = "test-session-4"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ edge cases
    test_cases = [
        ("", "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞"),
        ("   ", "–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"),
        ("–ù–µ—Ç PII –¥–∞–Ω–Ω—ã—Ö", "–¢–µ–∫—Å—Ç –±–µ–∑ PII"),
        ("AKIA1234567890EXAMPLE", "–¢–æ–ª—å–∫–æ AWS –∫–ª—é—á"),
        ("password: mySecret", "–¢–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å"),
    ]
    
    all_passed = True
    
    for content, description in test_cases:
        print(f"\nüìù –¢–µ—Å—Ç: {description}")
        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: '{content}'")
        
        try:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º
            pii_result = await gateway.mask_sensitive_data(content, session_id)
            print(f"   –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω: '{pii_result.content}' (PII: {pii_result.pii_count})")
            
            # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º
            unmasked = await gateway.unmask_sensitive_data(pii_result.content, session_id)
            print(f"   –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω: '{unmasked}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
            if pii_result.pii_count == 0:
                # –ï—Å–ª–∏ PII –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
                success = content == pii_result.content == unmasked
            else:
                # –ï—Å–ª–∏ PII –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º
                success = content == unmasked
            
            print(f"   ‚úÖ {'–ü–†–û–ô–î–ï–ù' if success else '–ü–†–û–í–ê–õ–ï–ù'}")
            all_passed = all_passed and success
            
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            all_passed = False
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    await gateway.clear_session(session_id)
    
    return all_passed

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PII –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    config_files = [
        "llm_pii_proxy/config/pii_patterns.yaml",
        "azure.env"
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}")
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_pii_basic_functionality,
        test_pii_with_tool_calling,
        test_pii_streaming,
        test_pii_edge_cases
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main()) 