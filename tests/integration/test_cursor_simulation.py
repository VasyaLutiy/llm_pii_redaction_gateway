#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è Cursor –ø—Ä–∏ tool calling
"""

import json
import asyncio
import httpx

async def test_cursor_simulation():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ Cursor"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª–∏
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
    async with httpx.AsyncClient() as client:
        models_response = await client.get("http://192.168.0.182:8000/v1/models")
        print(f"üìã –ú–æ–¥–µ–ª–∏: {models_response.status_code}")
        if models_response.status_code == 200:
            models = models_response.json()
            for model in models["data"]:
                print(f"   - {model['id']}: tools={model.get('capabilities', {}).get('tools', False)}")
    
    # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ Cursor
    print("\nüöÄ –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ Cursor...")
    
    cursor_request = {
        "model": "gpt-4.1",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª README.md –∏ —Å–∫–∞–∂–∏ —á—Ç–æ –≤ –Ω–µ–º"
            }
        ],
        "tools": [
            {
                "type": "function",
                "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file",
                    "parameters": {
                        "properties": {
                            "target_file": {
                                "description": "The path of the file to read",
                                "type": "string"
                            },
                            "should_read_entire_file": {
                                "description": "Whether to read the entire file",
                                "type": "boolean"
                            },
                            "start_line_one_indexed": {
                                "description": "The one-indexed line number to start reading from",
                                "type": "integer"
                            },
                            "end_line_one_indexed_inclusive": {
                                "description": "The one-indexed line number to end reading at",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "target_file",
                            "should_read_entire_file",
                            "start_line_one_indexed", 
                            "end_line_one_indexed_inclusive"
                        ],
                        "type": "object"
                    }
                }
            }
        ],
        "tool_choice": "auto",
        "temperature": 0.0,
        "max_tokens": 4000,
        "stream": False
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                "http://192.168.0.182:8000/v1/chat/completions",
                json=cursor_request,
                headers={
                    "Content-Type": "application/json",
                    "Authorization": "Bearer fake-key",
                    "User-Agent": "cursor-vscode"
                },
                timeout=30.0
            )
            
            print(f"üì® –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "choices" in data and len(data["choices"]) > 0:
                    choice = data["choices"][0]
                    message = choice.get("message", {})
                    
                    print(f"   Role: {message.get('role', 'unknown')}")
                    print(f"   Content: {message.get('content', '')[:100]}...")
                    print(f"   Tool calls: {len(message.get('tool_calls', []))}")
                    
                    if message.get("tool_calls"):
                        for i, tc in enumerate(message["tool_calls"]):
                            print(f"     Tool {i+1}: {tc.get('function', {}).get('name', 'unknown')}")
                            print(f"     Args: {tc.get('function', {}).get('arguments', '')[:100]}...")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ tool –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        print("\nüîß –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ tool...")
                        
                        tool_call = message["tool_calls"][0]
                        tool_result = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ README.md:\n\n# Test file\nThis is a test file."
                        
                        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º tool
                        second_request = {
                            "model": "gpt-4.1",
                            "messages": [
                                {
                                    "role": "user",
                                    "content": "–ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª README.md –∏ —Å–∫–∞–∂–∏ —á—Ç–æ –≤ –Ω–µ–º"
                                },
                                {
                                    "role": "assistant",
                                    "content": "",
                                    "tool_calls": [tool_call]
                                },
                                {
                                    "role": "tool",
                                    "content": tool_result,
                                    "tool_call_id": tool_call["id"]
                                }
                            ],
                            "tools": cursor_request["tools"],
                            "tool_choice": "auto",
                            "temperature": 0.0,
                            "max_tokens": 4000,
                            "stream": False
                        }
                        
                        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º tool...")
                        
                        response2 = await client.post(
                            "http://192.168.0.182:8000/v1/chat/completions",
                            json=second_request,
                            headers={
                                "Content-Type": "application/json",
                                "Authorization": "Bearer fake-key",
                                "User-Agent": "cursor-vscode"
                            },
                            timeout=30.0
                        )
                        
                        print(f"üì® –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç: {response2.status_code}")
                        
                        if response2.status_code == 200:
                            data2 = response2.json()
                            message2 = data2["choices"][0]["message"]
                            print(f"üéâ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {message2.get('content', '')[:200]}...")
                            return True
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –∑–∞–ø—Ä–æ—Å–µ: {response2.text}")
                            return False
                    else:
                        print("‚ùå –ù–µ—Ç tool calls –≤ –æ—Ç–≤–µ—Ç–µ")
                        return False
                else:
                    print("‚ùå –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"‚ùå –¢–µ–ª–æ: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False

if __name__ == "__main__":
    result = asyncio.run(test_cursor_simulation())
    if result:
        print("\n‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø CURSOR –£–°–ü–ï–®–ù–ê!")
    else:
        print("\n‚ùå –°–ò–ú–£–õ–Ø–¶–ò–Ø CURSOR –ü–†–û–í–ê–õ–ï–ù–ê!") 