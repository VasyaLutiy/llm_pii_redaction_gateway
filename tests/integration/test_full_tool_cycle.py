#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê tool calling —á–µ—Ä–µ–∑ LLM PII Proxy
"""

import json
import asyncio
import httpx

async def test_full_tool_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ tool calling"""
    
    # –®–∞–≥ 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º tool_calls
    print("üöÄ –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å tool...")
    
    first_request = {
        "model": "gpt-4.1",
        "messages": [
            {
                "role": "user", 
                "content": "–ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª llm_pii_proxy/main.py –∏ —Å–∫–∞–∂–∏ —á—Ç–æ –≤ –Ω–µ–º"
            }
        ],
        "tools": [
            {
                "type": "function",
                "function": {
                    "name": "read_file",
                    "description": "Read a file",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "filename": {
                                "type": "string",
                                "description": "Path to file"
                            }
                        },
                        "required": ["filename"]
                    }
                }
            }
        ],
        "tool_choice": "auto",
        "temperature": 0.0,
        "stream": False
    }
    
    async with httpx.AsyncClient() as client:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response1 = await client.post(
            "http://192.168.0.182:8000/v1/chat/completions",
            json=first_request,
            headers={"Content-Type": "application/json"},
            timeout=30.0
        )
        
        if response1.status_code != 200:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –ü–ï–†–í–û–ú –ó–ê–ü–†–û–°–ï: {response1.status_code}")
            return False
        
        data1 = response1.json()
        print(f"‚úÖ –®–ê–ì 1 –£–°–ü–ï–®–ï–ù: –ü–æ–ª—É—á–∏–ª–∏ tool_calls")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º tool_calls
        message1 = data1["choices"][0]["message"]
        if not message1.get("tool_calls"):
            print("‚ùå –ù–ï–¢ TOOL CALLS!")
            return False
        
        tool_call = message1["tool_calls"][0]
        print(f"üîß Tool call: {tool_call['function']['name']}")
        print(f"üîß Arguments: {tool_call['function']['arguments']}")
        
        # –®–∞–≥ 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ tool (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Cursor)
        print("\nüöÄ –®–ê–ì 2: –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ tool...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª (—Å–∏–º—É–ª–∏—Ä—É–µ–º tool execution)
        try:
            with open("llm_pii_proxy/main.py", "r", encoding="utf-8") as f:
                file_content = f.read()
            tool_result = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ llm_pii_proxy/main.py:\n\n{file_content}"
        except Exception as e:
            tool_result = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
        
        print(f"‚úÖ –®–ê–ì 2 –£–°–ü–ï–®–ï–ù: –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω ({len(tool_result)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç tool execution –æ–±—Ä–∞—Ç–Ω–æ
        print("\nüöÄ –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç tool execution...")
        
        second_request = {
            "model": "gpt-4.1",
            "messages": [
                {
                    "role": "user", 
                    "content": "–ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª llm_pii_proxy/main.py –∏ —Å–∫–∞–∂–∏ —á—Ç–æ –≤ –Ω–µ–º"
                },
                {
                    "role": "assistant",
                    "content": "",
                    "tool_calls": [tool_call]
                },
                {
                    "role": "tool",
                    "content": tool_result,
                    "tool_call_id": tool_call["id"]
                }
            ],
            "tools": [
                {
                    "type": "function",
                    "function": {
                        "name": "read_file",
                        "description": "Read a file",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "filename": {
                                    "type": "string",
                                    "description": "Path to file"
                                }
                            },
                            "required": ["filename"]
                        }
                    }
                }
            ],
            "tool_choice": "auto",
            "temperature": 0.0,
            "stream": False
        }
        
        response2 = await client.post(
            "http://192.168.0.182:8000/v1/chat/completions",
            json=second_request,
            headers={"Content-Type": "application/json"},
            timeout=30.0
        )
        
        if response2.status_code != 200:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í–û –í–¢–û–†–û–ú –ó–ê–ü–†–û–°–ï: {response2.status_code}")
            print(f"‚ùå BODY: {response2.text}")
            return False
        
        data2 = response2.json()
        print(f"‚úÖ –®–ê–ì 3 –£–°–ü–ï–®–ï–ù: –ü–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        message2 = data2["choices"][0]["message"]
        if message2.get("tool_calls"):
            print("‚ùå –ü–û–õ–£–ß–ò–õ–ò –ï–©–ï TOOL CALLS –≤–º–µ—Å—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!")
            return False
        
        if not message2.get("content"):
            print("‚ùå –ù–ï–¢ –°–û–î–ï–†–ñ–ò–ú–û–ì–û –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ!")
            return False
        
        print(f"üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢: {message2['content'][:200]}...")
        return True

if __name__ == "__main__":
    result = asyncio.run(test_full_tool_cycle())
    if result:
        print("\n‚úÖ –ü–û–õ–ù–´–ô –¶–ò–ö–õ TOOL CALLING –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\n‚ùå –ü–û–õ–ù–´–ô –¶–ò–ö–õ TOOL CALLING –ù–ï –†–ê–ë–û–¢–ê–ï–¢!") 