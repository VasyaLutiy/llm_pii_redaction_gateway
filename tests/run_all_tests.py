#!/usr/bin/env python3
"""
üß™ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í LLM PII PROXY
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path

def run_test_file(test_file_path: str) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–ê–ü–£–°–ö: {test_file_path}")
    print(f"{'='*60}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run(
            [sys.executable, test_file_path],
            cwd=os.path.dirname(os.path.abspath(__file__)) + "/../../..",  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            capture_output=True,
            text=True,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        )
        
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {test_file_path}")
            return True
        else:
            print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {test_file_path} (–∫–æ–¥: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–ï–°–¢ –ü–†–ï–í–´–°–ò–õ –¢–ê–ô–ú–ê–£–¢: {test_file_path}")
        return False
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {test_file_path} - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í LLM PII PROXY")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ tests
    tests_dir = Path(__file__).parent
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = []
    
    # Unit tests
    unit_dir = tests_dir / "unit"
    if unit_dir.exists():
        for test_file in unit_dir.glob("test_*.py"):
            test_files.append(("Unit", str(test_file)))
    
    # Integration tests
    integration_dir = tests_dir / "integration"
    if integration_dir.exists():
        for test_file in integration_dir.glob("test_*.py"):
            test_files.append(("Integration", str(test_file)))
    
    # E2E tests
    e2e_dir = tests_dir / "e2e"
    if e2e_dir.exists():
        for test_file in e2e_dir.glob("test_*.py"):
            test_files.append(("E2E", str(test_file)))
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(test_files)}")
    for test_type, test_file in test_files:
        print(f"   [{test_type}] {os.path.basename(test_file)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0
    
    for test_type, test_file in test_files:
        print(f"\nüîÑ [{test_type}] {os.path.basename(test_file)}")
        
        if run_test_file(test_file):
            passed += 1
        else:
            failed += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìä –í—Å–µ–≥–æ: {passed + failed}")
    
    if failed == 0:
        print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        print(f"üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´!")
        sys.exit(1)

if __name__ == "__main__":
    main() 