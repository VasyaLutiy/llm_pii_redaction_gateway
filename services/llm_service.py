# services/llm_service.py

import logging
import time
import os
import uuid
from typing import Dict, Any
from llm_pii_proxy.core.models import ChatRequest, ChatResponse
from llm_pii_proxy.core.exceptions import PIIProcessingError, LLMProviderError
from llm_pii_proxy.providers.azure_provider import AzureOpenAIProvider
from llm_pii_proxy.security.pii_gateway import AsyncPIISecurityGateway
from llm_pii_proxy.config.settings import settings, Settings

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

class LLMService:
    def __init__(self, llm_provider: AzureOpenAIProvider, pii_gateway: AsyncPIISecurityGateway):
        self.llm_provider = llm_provider
        self.pii_gateway = pii_gateway
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.debug_mode = settings.pii_proxy_debug
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ PII
        
        logger.info(f"üîß LLMService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", extra={
            "debug_mode": self.debug_mode,
            "pii_enabled": self.pii_enabled,
            "pii_timeout_minutes": settings.pii_session_timeout_minutes
        })
    
    @property
    def pii_enabled(self) -> bool:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PII –∑–∞—â–∏—Ç—ã"""
        return Settings().pii_protection_enabled

    async def process_chat_request(self, request: ChatRequest) -> ChatResponse:
        request_id = f"req_{int(time.time() * 1000)}"  # –ü—Ä–æ—Å—Ç–æ–π ID –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        session_id = request.session_id or uuid.uuid4().hex
        
        logger.info(f"üöÄ [{request_id}] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É chat request", extra={
            "request_id": request_id,
            "session_id": session_id,
            "model": request.model,
            "messages_count": len(request.messages),
            "pii_enabled_global": self.pii_enabled,
            "pii_protection_requested": request.pii_protection
        })
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å PII –∑–∞—â–∏—Ç—É
            should_protect_pii = self.pii_enabled and request.pii_protection
            
            if should_protect_pii:
                logger.info(f"üîí [{request_id}] PII –∑–∞—â–∏—Ç–∞ –í–ö–õ–Æ–ß–ï–ù–ê")
                
                # 1. Mask PII in messages
                masked_messages = []
                total_pii_count = 0
                
                for i, message in enumerate(request.messages):
                    if message.content:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                        try:
                            pii_result = await self.pii_gateway.mask_sensitive_data(
                                content=message.content,
                                session_id=session_id
                            )
                            
                            masked_message = message.model_copy()
                            masked_message.content = pii_result.content
                            masked_messages.append(masked_message)
                            total_pii_count += pii_result.pii_count
                            
                            if pii_result.pii_count > 0:
                                logger.info(f"üîç [{request_id}] –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: –Ω–∞–π–¥–µ–Ω–æ {pii_result.pii_count} PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            
                        except Exception as e:
                            logger.error(f"‚ùå [{request_id}] –û—à–∏–±–∫–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
                            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            masked_messages.append(message)
                    else:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        masked_messages.append(message)
                
                if total_pii_count > 0:
                    logger.info(f"üîí [{request_id}] –í—Å–µ–≥–æ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ {total_pii_count} PII —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                masked_request = request.model_copy()
                masked_request.messages = masked_messages
            else:
                logger.info(f"‚ö†Ô∏è [{request_id}] PII –∑–∞—â–∏—Ç–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê (–≥–ª–æ–±–∞–ª—å–Ω–æ: {self.pii_enabled}, –∑–∞–ø—Ä–æ—Å: {request.pii_protection})")
                masked_request = request
                total_pii_count = 0

            # 2. Call LLM provider with masked request
            logger.info(f"üåê [{request_id}] –≠—Ç–∞–ø 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–π LLM...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
            if self.debug_mode:
                logger.debug(f"üì§ [{request_id}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for i, msg in enumerate(masked_request.messages):
                    logger.debug(f"    {i+1}. {msg.role}: {msg.content}")
            
            start_time = time.time()
            response = await self.llm_provider.create_chat_completion(masked_request)
            llm_duration = time.time() - start_time

            # 3. Unmask PII in response if protection was enabled
            if should_protect_pii and total_pii_count > 0:
                logger.info(f"üîì [{request_id}] –≠—Ç–∞–ø 3: –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
                
                try:
                    # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö
                    for choice in response.choices:
                        if choice.get("message", {}).get("content"):
                            original_content = choice["message"]["content"]
                            unmasked_content = await self.pii_gateway.unmask_sensitive_data(
                                content=original_content,
                                session_id=session_id
                            )
                            choice["message"]["content"] = unmasked_content
                            
                            if original_content != unmasked_content:
                                logger.info(f"üîÑ [{request_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
                        
                        # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º tool calls –µ—Å–ª–∏ –µ—Å—Ç—å
                        if choice.get("message", {}).get("tool_calls"):
                            for tool_call in choice["message"]["tool_calls"]:
                                if tool_call.get("function", {}).get("arguments"):
                                    original_args = tool_call["function"]["arguments"]
                                    unmasked_args = await self.pii_gateway.unmask_sensitive_data(
                                        content=original_args,
                                        session_id=session_id
                                    )
                                    tool_call["function"]["arguments"] = unmasked_args
                                    
                                    if original_args != unmasked_args:
                                        logger.info(f"üîÑ [{request_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã tool call")
                    
                    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    await self.pii_gateway.clear_session(session_id)
                    logger.info(f"üßπ [{request_id}] PII —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞")
                    
                except Exception as e:
                    logger.error(f"‚ùå [{request_id}] –û—à–∏–±–∫–∞ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            else:
                logger.info(f"‚ÑπÔ∏è [{request_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Azure, –µ—Å–ª–∏ model –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'gpt-4.1', –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ 'gpt-4.1' –¥–ª—è Cursor
            if hasattr(response, 'model') and isinstance(response.model, str) and response.model.startswith('gpt-4.1'):
                response.model = 'gpt-4.1'

            logger.info(f"üéâ [{request_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", extra={
                "request_id": request_id,
                "total_pii_found": total_pii_count,
                "llm_duration_ms": round(llm_duration * 1000, 2),
                "pii_protection_used": should_protect_pii
            })

            return response
            
        except Exception as e:
            logger.error(f"‚ùå [{request_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", extra={
                "request_id": request_id,
                "error": str(e),
                "error_type": type(e).__name__
            })
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
            if isinstance(e, (PIIProcessingError, LLMProviderError)):
                raise
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
            raise PIIProcessingError(f"LLMService error: {str(e)}") 

    async def process_chat_request_stream(self, request: ChatRequest):
        """
        –ê–Ω–∞–ª–æ–≥ process_chat_request, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç async-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ChatResponse-—á–∞–Ω–∫–æ–≤ –¥–ª—è stream-—Ä–µ–∂–∏–º–∞.
        """
        request_id = f"req_{int(time.time() * 1000)}"
        session_id = request.session_id or uuid.uuid4().hex
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å PII –∑–∞—â–∏—Ç—É
        should_protect_pii = self.pii_enabled and request.pii_protection
        
        logger.info(f"üöÄ [STREAM {request_id}] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É chat request (stream)", extra={
            "request_id": request_id,
            "session_id": session_id,
            "model": request.model,
            "messages_count": len(request.messages),
            "pii_protection_enabled": should_protect_pii
        })
        
        try:
            if should_protect_pii:
                logger.info(f"üîí [STREAM {request_id}] PII –∑–∞—â–∏—Ç–∞ –í–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è streaming")
                
                # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                masked_messages = []
                total_pii_count = 0
                
                for i, message in enumerate(request.messages):
                    if message.content:
                        try:
                            pii_result = await self.pii_gateway.mask_sensitive_data(
                                content=message.content,
                                session_id=session_id
                            )
                            
                            masked_message = message.model_copy()
                            masked_message.content = pii_result.content
                            masked_messages.append(masked_message)
                            total_pii_count += pii_result.pii_count
                            
                        except Exception as e:
                            logger.error(f"‚ùå [STREAM {request_id}] –û—à–∏–±–∫–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                            masked_messages.append(message)
                    else:
                        masked_messages.append(message)
                
                masked_request = request.model_copy()
                masked_request.messages = masked_messages
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ chunks –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                accumulated_content = ""
                accumulated_tool_calls = []
                
                async for chunk in self.llm_provider.create_chat_completion_stream(masked_request):
                    # –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                    if chunk.choices and len(chunk.choices) > 0:
                        choice = chunk.choices[0]
                        delta = choice.get("delta", {})
                        if delta.get("content"):
                            accumulated_content += delta["content"]
                        if delta.get("tool_calls"):
                            accumulated_tool_calls.extend(delta["tool_calls"])
                    
                    # –û—Ç–¥–∞–µ–º chunk –∫–∞–∫ –µ—Å—Ç—å (–ø–æ–∫–∞ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                    yield chunk
                
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è streaming –¥–µ–º–∞—Å–∫–∏—Ä—É–µ–º –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                if should_protect_pii and total_pii_count > 0:
                    logger.info(f"üîì [STREAM {request_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ streaming –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                    
                    try:
                        # –î–µ–º–∞—Å–∫–∏—Ä—É–µ–º –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                        if accumulated_content:
                            unmasked_content = await self.pii_gateway.unmask_sensitive_data(
                                content=accumulated_content,
                                session_id=session_id
                            )
                            logger.info(f"üîÑ [STREAM {request_id}] –î–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω streaming –∫–æ–Ω—Ç–µ–Ω—Ç")
                        
                        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                        await self.pii_gateway.clear_session(session_id)
                        logger.info(f"üßπ [STREAM {request_id}] PII —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞")
                        
                    except Exception as e:
                        logger.error(f"‚ùå [STREAM {request_id}] –û—à–∏–±–∫–∞ –¥–µ–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è streaming: {e}")
                
            else:
                logger.info(f"‚ö†Ô∏è [STREAM {request_id}] PII –∑–∞—â–∏—Ç–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è streaming")
                
                # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ PII –∑–∞—â–∏—Ç—ã
                async for chunk in self.llm_provider.create_chat_completion_stream(request):
                    yield chunk
                    
        except Exception as e:
            logger.error(f"‚ùå [STREAM {request_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ stream-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}", extra={
                "request_id": request_id,
                "error": str(e),
                "error_type": type(e).__name__
            })
            raise 