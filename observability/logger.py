# observability/logger.py
import logging
import sys
import os
from typing import Optional

def setup_logging(debug_mode: Optional[bool] = None, log_file_path: Optional[str] = None):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :param debug_mode: –í–∫–ª—é—á–∏—Ç—å DEBUG-—Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PII_PROXY_DEBUG)
    :param log_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /tmp/llm_pii_proxy_debug.log)
    """
    if debug_mode is None:
        debug_mode = os.getenv('PII_PROXY_DEBUG', 'false').lower() == 'true'
    if log_file_path is None:
        log_file_path = '/tmp/llm_pii_proxy_debug.log'

    # –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PII_PROXY_LOG_LEVEL
    log_level_env = os.getenv('PII_PROXY_LOG_LEVEL')
    if log_level_env:
        log_level = getattr(logging, log_level_env.upper(), logging.INFO)
    else:
        log_level = logging.DEBUG if debug_mode else logging.INFO

    formatter = logging.Formatter(
        '%(asctime)s | %(levelname)8s | %(name)s | %(message)s',
        datefmt='%H:%M:%S'
    )
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    file_handler = logging.FileHandler(log_file_path, mode='w', encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.DEBUG)

    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    root_logger.handlers = []
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)

    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('openai').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)

    if debug_mode:
        root_logger.info("üîç DEBUG –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    root_logger.info(f"üöÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è LLM PII Proxy. –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏: {log_file_path}")

def get_logger(name: Optional[str] = None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –ø–æ –∏–º–µ–Ω–∏ (–∏–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
    """
    return logging.getLogger(name)

# Structured logging will go here. 